C++ is a general-purpose programming language and is widely used nowadays for competitive programming. It has imperative, object-oriented, and generic programming features.
C++ is a general-purpose, object-oriented programming language. It was developed in 1979 by Bjarne Stroustrup at AT & T Bell Laboratory. It is a high-level programming language & advanced version of C programming language. 
Feature of c++::
1)simple
2)machine independent but platform depedenednt
3)speed of execution
4)rich library support
5)object oriented.
c++ basic syntax:
#include<iostream>
using namspace std;
int main(){
return 0;
}

here written in include is a header file:
HEADER FILES:
Standard Header files for c and c++ both:
<assert.h>:	It contains information for adding diagnostics that aid program debugging.
<errorno.h>:	It is used to perform error handling operations like errno(), strerror(), perror(), etc.
<float.h>:	
It contains a set of various platform-dependent constants related to floating point values. These constants are proposed by ANSI C. 

They make programs more portable. Some examples of constants included in this header file are- e(exponent), b(base/radix), etc.

<math.h>:	It is used to perform mathematical operations like sqrt(), log2(), pow(), etc.
<signal.h>:	It is used to perform signal handling functions like signal() and raise().
<stdarg.h>:	
It is used to perform standard argument functions like va_start() and va_arg(). It is also used to indicate start of the

variable-length argument list and to fetch the arguments from the variable-length argument list in the program respectively.

<ctype.h>:	
It contains function prototypes for functions that test characters for certain properties, and also function prototypes for 

functions that can be used to convert uppercase letters to lowercase letters and vice versa.

<stdio.h>:	It is used to perform input and output operations using functions like scanf(), printf(), etc.
<setjump.h>:	
It contains standard utility functions like malloc(), realloc(), etc. It contains function prototypes for functions that allow bypassing 

of the usual function call and return sequence.

<string.h>:	It is used to perform various functionalities related to string manipulation like strlen(), strcmp(), strcpy(), size(), etc.
<limits.h>:	
It determines the various properties of the various variable types. The macros defined in this header limits the values of 

various variable types like char, int, and long. These limits specify that a variable cannot store any value 

beyond these limits, for example, an unsigned character can store up to a maximum value of 255.

<time.h>:	
It is used to perform functions related to date() and time() like setdate() and getdate(). It is also used to modify the system date 

and get the CPU time respectively.

<stddef.h>:	It contains common type definitions used by C for performing calculations.
<locale.h>:	
It contains function prototypes and other information that enables a program to be modified for the current locale on which it’s running. 

It enables the computer system to handle different conventions for expressing data such as times, dates, or large numbers throughout the world.
Standard header files of c++ only:

<iostream>	It is used as a stream of Input and Output using cin and cout.
<iomanip>	It is used to access set() and setprecision() function to limit the decimal places in variables.
<fstream>	It is used to control the data to read from a file as an input and data to write into the file as an output.
<algorithm>	It contains some useful algorithms which are part of STL.
<new>	It contains dynamic memory allocation methods.
<vector>	It contains the definition of the vector class container of STL.
<map>	It contains the definition of the map class container of STL.
<bits/stdc++.h>	
It contains all standard libraries of the header files mentioned above. So if you include it in your code, then you need not have to 

include any other standard header files. But as it is a non-standard header file of GNU C++ library, so, if you try to compile your 

code with some compiler other than GCC it might fail; e.g. MSVC does not have this header.
USER DEFINED FILES:
To make user defined files we save the file with .h 

NAMESPACE:
Namespace provide the space where we can define or declare identifier i.e. variable,  method, classes.
Using namespace, you can define the space or context in which identifiers are defined i.e. variable, method, classes. In essence, a namespace defines a scope.
Namespaces allow us to group named entities that otherwise would have global scope into narrower scopes, giving them namespace scope. This allows organizing the elements of programs into different logical scopes referred to by names
syntax:
namespace  namespace_name 
{
    // code declarations i.e. variable  (int a;)
    method (void add();)
    classes ( class student{};)
}
in C++ always code written in a function  which is main which return  0 show the succesful executed result.
Identifiers:
We use identifiers for the naming of variables, functions, and other user-defined data types. An identifier may consist of uppercase and lowercase alphabetical characters, underscore, and digits. The first letter must be an underscore or an alphabet.
example:
int num=1;
keyword:
In the C++ programming language, there are some reserved words that are used for some special meaning in the C++ program. It can’t be used for identifiers.

For example, the words int, return, and using are some keywords used in our program. These all have some predefined meaning in the C++ language.

There are total 95 keywords in C++.
Constant:
it refer to the fixed value
Comment:
Comments are used for easier debugging.
It makes a program more readable and gives an overall description of the code.
Comments are helpful in skipping the execution of some parts of the code.
Every time a program or code is reused after long periods of time, the comment recaps all the information of the code quickly.
SINGLE LINE comment:
// single
multi line:
/* multi
line*/
Comments do not contribute to the functionality of the program they are simply omitted at the time of compilation.

Variable:
Variables in C++ is a name given to a memory location. It is the basic unit of storage in a program. 
The value stored in a variable can be changed during program execution.
A variable is only a name given to a memory location, all the operations done on the variable effects that memory location.
In C++, all the variables must be declared before use.
type_variable name:// syntax to decalre a variable.
The variable declaration refers to the part where a variable is first declared or introduced before its first use. A variable definition is a part where the variable is assigned a memory location and a value.
Local Variables: A variable defined within a block or method or constructor is called a local variable. 
These variables are created when entered into the block or the function is called and destroyed after exiting from the block or when the call returns from the function.
The scope of these variables exists only within the block in which the variable is declared. i.e. we can access this variable only within that block.
Initialization of Local Variable is Mandatory.
Instance Variables: Instance variables are non-static variables and are declared in a class outside any method, constructor, or block. 
As instance variables are declared in a class, these variables are created when an object of the class is created and destroyed when the object is destroyed.
Unlike local variables, we may use access specifiers for instance variables. If we do not specify any access specifier then the default access specifier will be used.
Initialization of Instance Variable is not Mandatory.
Instance Variable can be accessed only by creating objects.
Global Variables
As the name suggests, they can be accessed in any part of the program. They are defined at the top of the program after the include directives, outside any function. They are not allocated inside any function stack. Instead, they are allocated on the Initialized/Uninitialized segment of Program Memory. Thus, they have a lifetime equal to that of the whole program.
note:: precendence of global varible is less than local means if same name local and global present then local variable has power in that scope.
C++ data types:
data types are used to tell the variables the type of data they can store. Whenever a variable is defined in C++, the compiler allocates some memory for that variable based on the data type with which it is declared. Every data type requires a different amount of memory. 
Data Types in C++ are Mainly Divided into 3 Types: 
1. Primitive Data Types: These data types are built-in or predefined data types and can be used directly by the user to declare variables. example: int, char, float, bool, etc. Primitive data types available in C++ are: 

Integer
Character
Boolean
Floating Point
Double Floating Point
Valueless or Void
Wide Character
2. Derived Data Types: Derived data types that are derived from the primitive or built-in datatypes are referred to as Derived Data Types. These can be of four types namely: 

Function
Array
Pointer
Reference
3. Abstract or User-Defined Data Types: Abstract or User-Defined data types are defined by the user itself. Like, defining a class in C++ or a structure. C++ provides the following user-defined datatypes:  

Class
Structure
Union
Enumeration
Typedef defined Datatype
Data modifiers:
datatype modifiers are used with built-in data types to modify the length of data that a particular data type can hold. 
Range:
Data Type

Size (in bytes)

Range

short int

2

-32,768 to 32,767

unsigned short int

2

0 to 65,535

unsigned int

4

0 to 4,294,967,295

int

4

-2,147,483,648 to 2,147,483,647

long int

4

-2,147,483,648 to 2,147,483,647

unsigned long int

4

0 to 4,294,967,295

long long int

8

-(2^63) to (2^63)-1

unsigned long long int

8

0 to 18,446,744,073,709,551,615

signed char

1

-128 to 127

unsigned char

1

0 to 255

float

4

-3.4×10^38 to 3.4×10^38

double

8

-1.7×10^308 to1.7×10^308

long double

12

-1.1×10^4932 to1.1×10^4932

wchar_t

2 or 4

1 wide character
IMPORTANT NOTE:
1)// CPP program to illustrate
// std::oct, std::hex, std::dec
#include <iostream> // std::cout, std::dec, std::hex, std::oct

int main()
{
	int n = 54;
	std::cout << std::oct << "oct - " << n << '\n';
	std::cout << std::dec << "dec - " << n << '\n';
	std::cout << std::hex << "hex - " << n << '\n';
	return 0;
}
To change any number int hexadecimal,octal,decimal.
Typeid opertor: to used this operator we need to include librray of type info it will give type of data stored by my variable.
#include<bits/stdc++.h>
#include<typeinfo>
using namespace std;

int main(){
auto a=4.5;

cout<<typeid(a).name();
return 0;
} 
Basic input and output:: it can be done by the iostream library. 
cout,cin are the input and output stream
cout using << insertion operator
cin using >> extraction opertor
A preprocessor directive is a statement which gets processed by the C++ preprocessor before compilation.

Typecasting::
it is conversion of data type of member from one data type to another.
Implicit type casting: it is done by compiler by its own.
order of changing implicity
bool -> char -> short int -> int -> 

unsigned int -> long -> unsigned -> 

long long -> float -> double -> long double
Explicit type conversion: it is done by user what data type conversion is he needed.
Converting by assignment: This is done by explicitly defining the required type in front of the expression in parenthesis. This can be also considered as forceful casting.

Syntax:
(type) expression
Conversion using Cast operator: A Cast operator is an unary operator which forces one data type to be converted into another data type.
(types of cast read )

operator:
a<<(left shift operator)
a>>(right shift operator)

postincrement =i++ it will assign value first then increase
pre increment =++i it will increase value first then assign
                               
Precedence	Operator	Description	Associativity
1//precedence	
a++ a--
a( )
a[ ]// operator
. ->

Post-increment/decrement
Function call
Array subscript
Member access// description
Left-to-right// precedence
2	
++a --a
+a -a
! ~
(type)
*a
&a
sizeof
new
delete

Pre-increment/decrement
Unary plus & minus
Logical NOT & bitwise NOT
Type-casting
Dereferencing
Address-of
sizeof
Dynamic Memory Allocation
Memory De-allocation
Right-to-left
3	
*(a.b) *(a->b)
Pointer to member	Left-to-right
4	
a*b a/b a%b
Multiplication, division & remainder	Left-to-right
5	
a+b a-b
Addition & subtraction	Left-to-right
6	<< >>	Bitwise left-shift and right-shift	Left-to-right
7	
< <=
> >=

Relational operators < and ≤

Relational operators > and ≥
Left-to-right
8	
== !=

Relational operators = and ≠
Left-to-Right
9	&	Bitwise-AND	Left-to-right
10	^	Bitwise-XOR	Left-to-right
11	|	Bitwise-OR	Left-to-right
12	&&	Logical AND	Left-to-right
13	||	Logical OR	Left-to-right
14	
a?b:c
=
+= -=
*= /= %=

<<= >>=
&= ^= |=

Ternary/conditional
Assignment
Assignment (sum, difference)
Assignment (multiply, divide, modulo)
Assignment (left-shift, right-shift)
Assignment (AND, XOR, OR)
Right-to-left
15	,	Comma	Left-to-right





